name: Deploy to DigitalOcean

on:
  push:
    branches:
      - release

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest

    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
      PORT: ${{ secrets.PORT }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 4: Add SSH Key
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.DO_DROPLET_IP }} >> ~/.ssh/known_hosts

      # Step 5: Deploy Application
      - name: Deploy via SSH
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no root@${{ secrets.DO_DROPLET_IP }} << 'EOF'
            set -e
            cd /var/www/splitt-api
            git pull origin release
            npm install

            # Create .env file with environment variables
            cat > .env <<EOL
            JWT_SECRET="$JWT_SECRET"
            JWT_EXPIRES_IN="$JWT_EXPIRES_IN"
            PORT="$PORT"
            FIREBASE_PROJECT_ID="$FIREBASE_PROJECT_ID"
            FIREBASE_PRIVATE_KEY_ID="$FIREBASE_PRIVATE_KEY_ID"
            FIREBASE_PRIVATE_KEY='$FIREBASE_PRIVATE_KEY'
            FIREBASE_CLIENT_EMAIL="$FIREBASE_CLIENT_EMAIL"
            FIREBASE_CLIENT_ID="$FIREBASE_CLIENT_ID"
            EOL

            # Start/Restart application using PM2
            pm2 restart splitt-api || pm2 start src/server.js --name splitt-api -- --port 5000
            pm2 save
          EOF

      # Step 6: Wait for Application to Start
      - name: Wait for Application to Start
        run: sleep 10  # Wait for 10 seconds to ensure the app is fully up

      # Step 7: Verify Health Check Endpoint
      - name: Verify Health Check
        run: |
          HEALTH_CHECK_URL="http://${{ secrets.DO_DROPLET_IP }}:5000/health"
          echo "Checking health at: $HEALTH_CHECK_URL"
          response=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
          if [ "$response" -eq 200 ]; then
            echo "Health check passed!"
          else
            echo "Health check failed with status code: $response"
            exit 1  # Fail the workflow if health check fails
          fi